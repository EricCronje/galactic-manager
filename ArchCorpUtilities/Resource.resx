<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddBuildingHint" xml:space="preserve">
    <value>(Hint: Press x if you do not want to enter a building name.)</value>
  </data>
  <data name="BuildingAdded" xml:space="preserve">
    <value>Building added successfully</value>
  </data>
  <data name="BuildingFileImportCompletionSuccessMessage" xml:space="preserve">
    <value>Loading buildings from</value>
    <comment>On completion of loading the building file.</comment>
  </data>
  <data name="BuildingFileImportProgressFailedMessage" xml:space="preserve">
    <value>Existing building:</value>
  </data>
  <data name="BuildingFileImportProgressSuccessMessage" xml:space="preserve">
    <value>Added the building - </value>
    <comment>Shown when successful - giving progress to the client</comment>
  </data>
  <data name="BuildingListPrompt" xml:space="preserve">
    <value>Buildings list:</value>
  </data>
  <data name="BuildingNameSearch" xml:space="preserve">
    <value>Please enter a building name to search for:</value>
  </data>
  <data name="BuildingRemoved" xml:space="preserve">
    <value>Building removed</value>
  </data>
  <data name="BuildingUpdatedFromPrompt" xml:space="preserve">
    <value>Building updated from</value>
  </data>
  <data name="ClearConsoleMessage" xml:space="preserve">
    <value>&lt;ClearConsole&gt;</value>
  </data>
  <data name="DuplicateEntryMessage" xml:space="preserve">
    <value>Duplicate entry</value>
  </data>
  <data name="EnterANewBuildingNamePrompt" xml:space="preserve">
    <value>Enter a new building name:</value>
  </data>
  <data name="EnterBuildingNamePrompt" xml:space="preserve">
    <value>Enter the building name:</value>
  </data>
  <data name="FailedToAddBuilding" xml:space="preserve">
    <value>Failed to add the building.</value>
  </data>
  <data name="FailedToAddBuildingNameInvalid" xml:space="preserve">
    <value>The building name is invalid or empty.</value>
  </data>
  <data name="FailedToEditBuilding" xml:space="preserve">
    <value>Failed to edit the buidling</value>
  </data>
  <data name="HorizontalLine" xml:space="preserve">
    <value>-------------------------</value>
  </data>
  <data name="InvalidBuildingNameEntered" xml:space="preserve">
    <value>Building name was invalid - please re-enter.</value>
  </data>
  <data name="NoBuildingNameEntered" xml:space="preserve">
    <value>No building name entered</value>
  </data>
  <data name="NoBuildingNameSelected" xml:space="preserve">
    <value>No building selected.</value>
  </data>
  <data name="NoBuildingRemovedPrompt" xml:space="preserve">
    <value>No building removed</value>
  </data>
  <data name="NoBuildingsAdded" xml:space="preserve">
    <value>No building added.</value>
  </data>
  <data name="NoBuildingsToList" xml:space="preserve">
    <value>No buildings to list</value>
  </data>
  <data name="NoDataSaved" xml:space="preserve">
    <value>No data saved.</value>
  </data>
  <data name="SaveBuidlingsError" xml:space="preserve">
    <value>Error -</value>
  </data>
  <data name="SaveBuidlingSuccess" xml:space="preserve">
    <value>Saved to file</value>
  </data>
  <data name="SearchResults" xml:space="preserve">
    <value>Search Results:</value>
  </data>
  <data name="SelectABuildingToEditPrompt" xml:space="preserve">
    <value>Select a building to edit:</value>
  </data>
  <data name="SelectABuildingToRemove" xml:space="preserve">
    <value>Select a building to remove:</value>
  </data>
  <data name="SimulationNotSet" xml:space="preserve">
    <value>Simulation is not set</value>
  </data>
</root>